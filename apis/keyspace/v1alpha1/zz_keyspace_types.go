/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyspaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KeyspaceParameters struct {

	// Astra database to create the keyspace.
	// +kubebuilder:validation:Required
	DatabaseID *string `json:"databaseId" tf:"database_id,omitempty"`

	// Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters and numbers are supported as the first character.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// KeyspaceSpec defines the desired state of Keyspace
type KeyspaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyspaceParameters `json:"forProvider"`
}

// KeyspaceStatus defines the observed state of Keyspace.
type KeyspaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Keyspace is the Schema for the Keyspaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datastax-astra}
type Keyspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyspaceSpec   `json:"spec"`
	Status            KeyspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyspaceList contains a list of Keyspaces
type KeyspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Keyspace `json:"items"`
}

// Repository type metadata.
var (
	Keyspace_Kind             = "Keyspace"
	Keyspace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Keyspace_Kind}.String()
	Keyspace_KindAPIVersion   = Keyspace_Kind + "." + CRDGroupVersion.String()
	Keyspace_GroupVersionKind = CRDGroupVersion.WithKind(Keyspace_Kind)
)

func init() {
	SchemeBuilder.Register(&Keyspace{}, &KeyspaceList{})
}
